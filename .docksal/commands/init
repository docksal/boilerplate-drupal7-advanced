#!/usr/bin/env bash

## Initialize a Docksal powered Drupal 7 site
##
## Usage: fin init

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------

# PROJECT_ROOT is passed from fin.
# The following variables are configured in the '.env' file: DOCROOT, SITE_DIRECTORY, SOURCE_ALIAS and others.

DOCROOT_PATH="${PROJECT_ROOT}/${DOCROOT}"
SITEDIR_PATH="${DOCROOT_PATH}/sites/${SITE_DIRECTORY}"

#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

# Check whether shell is interactive (otherwise we are running in a non-interactive script environment)
is_tty ()
{
	[[ "$(/usr/bin/tty || true)" != "not a tty" ]]
}

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
_confirm ()
{
	# Skip checks if not a tty
	if ! is_tty ; then return 0; fi

	while true; do
		read -p "$1 [y/n]: " answer
		case $answer in
			[Yy]|[Yy][Ee][Ss] )
				break
				;;
			[Nn]|[Nn][Oo] )
				exit 1
				;;
			* )
				echo 'Please answer yes or no.'
		esac
	done
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
	local source="$1"
	local dest="$2"

	if [[ ! -f $dest ]]; then
		echo "Copying ${dest}..."
		cp $source $dest
	else
		echo-yellow "${dest} already in place."
	fi
}

#-------------------------- END: Helper functions --------------------------------

#-------------------------- Functions --------------------------------

# Initialize local settings files
init_settings ()
{
	# Drupal
	copy_settings_file "${SITEDIR_PATH}/example.settings.local.php" "${SITEDIR_PATH}/settings.local.php"

	# Behat
	copy_settings_file 'tests/behat/behat.yml.dist' 'tests/behat/behat.yml'
}

# Fix file/folder permissions
fix_permissions ()
{
	echo-green "Making site directory writable..."
	chmod 755 "${SITEDIR_PATH}"
}

# Install site
site_install ()
{
	cd $DOCROOT_PATH

	# We disable email sending here so site-install does not return an error
	fin exec "php -d sendmail_path=/bin/true /usr/local/bin/drush site-install -y --site-name='My Drupal 7 Site'" || true
}

# Install another site
site_install_anothersite ()
{
	cd $DOCROOT_PATH

	# Initialize settings
	copy_settings_file "sites/example.com/example.settings.local.php" "sites/example.com/settings.local.php"
	fin exec sed -i "s/%host%/${VIRTUAL_HOST}/g" "/var/www/${DOCROOT}/sites/sites.php"
	fin exec sed -i "s/%host%/${VIRTUAL_HOST}/g" "/var/www/drush/aliases/drupal7-advanced.aliases.drushrc.php"
	# Create DB
	fin db create 'anothersite'
	# Install site
	fin exec "php -d sendmail_path=/bin/true /usr/local/bin/drush @drupal7-advanced.anothersite site-install -y --site-name='Another Drupal 7 Site'" || true
	echo -e "Open ${yellow}http://anothersite.${VIRTUAL_HOST}${NC} in your browser to view site1"
}

# Import database from the source site alias
db_import ()
{
	_confirm "Do you want to import DB from ${SOURCE_ALIAS}?"

	cd $DOCROOT_PATH
	fin drush -l "${SITE_DIRECTORY}" sql-sync "${SOURCE_ALIAS}" @self -y
}

# Misc drush commands to bring DB up-to-date
db_updates ()
{
	cd $DOCROOT_PATH
	echo-yellow "Applying DB updates..."

	set -x
	fin drush -l $SITE_DIRECTORY status
	fin drush -l $SITE_DIRECTORY rr # resolve moved modules
	fin drush -l $SITE_DIRECTORY updb -y # run necessary db updaes
	#fin drush -l $SITE_DIRECTORY fra -y # revert features
	fin drush -l $SITE_DIRECTORY cc all # clear caches
	fin drush -l $SITE_DIRECTORY cron -v
	set +x
}

# Local adjustments
local_settings ()
{
	cd $DOCROOT_PATH
	echo-yellow "Applying local settings..."

	set -x
	fin drush -l $SITE_DIRECTORY en "${MODULES_ENABLED}" -y
	fin drush -l $SITE_DIRECTORY dis "${MODULES_DISABLED}" -y
	set +x
}

# Compile Sass
compass_compile ()
{
	cd $PROJECT_ROOT
	echo-yellow "Compiling Sass..."

#	set -x
#	cd ${DOCROOT_PATH}/sites/all/themes/<themename>
#	fin exec bundle install
#	fin exec bundle exec compass compile
#	set +x
}

# Run basic Behat validation tests
run_behat ()
{
	cd $PROJECT_ROOT

	echo -e "${yellow}Launching Behat validation tests...${NC}"
	cd tests/behat
	fin behat --format=pretty --out=std --format=junit --out=junit features/blackbox.feature
}

#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------

if [[ "$PROJECT_ROOT" == "" ]]; then
	echo-red "\$PROJECT_ROOT is not set"
	exit 1
fi

# Project initialization steps
echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"
fix_permissions
init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
	echo -e "${green_bg} Step 2 ${NC}${green} Recreating services...${NC}"
	fin reset -f
else
	echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
	fin up
fi

echo "Waiting 10s for MySQL to initialize...";
sleep 10

echo -e "${green_bg} Step 3 ${NC}${green} Installing site...${NC}"
time site_install

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup."

# Examples of other things that can be done.

#db_import
#db_updates
#local_settings
#compass_compile
#run_behat

# Multisite - install an additional site
site_install_anothersite

#-------------------------- END: Execution --------------------------------
